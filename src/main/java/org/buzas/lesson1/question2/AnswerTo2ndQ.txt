Ошибки в коде на исправление:
Во-первых, в глаза сразу бросается частое и довольно грубое игнорирование модификаторов доступа. Инкапсуляцию никто не отменял. Самым грубым примером являлся
 Engine engine в абстрактном классе Car- он был public и при этом в коде на него были геттеры и сеттеры. Исправил.
Во-вторых, чтобы не делал класс Engine по задумке,- его не существует, чтобы на него ссылаться. Накидал простенький класс
 с простой и логичной для класса двигателя реализацией: его можно включить и выключить.
В-третьих, очевидная ошибка, но кретичная для компиляции: класс Lorry не реализует один наследуемых методов, а именно open() из Car().
В-четвертых, в ровно той же строчке, что и в третьем пункте и такая же кретическая: неверное использование extends и игнорирование implements,
 с помощью которого должны быть унаследованы интерфейсы Moveable и Stopable.

Предложения по оптимизации:
Для большей читаемости снести к чертям геттеры и сеттеры, применив аннотации Lombok и просто переписав их где требуется в ручную. В данном примере таких мест нет,
 т.е. код 'потеряет' строчки с 19 по 41 из-за чего станет легче ориентироваться в самом классе, если потребуется что-то добавить. Это также поможет в ситуации, если
 любой из классов будет расширятся и добавлять в себя новые параметры. Если же появится параметр, геттер или сеттер для которого должен будет быть недоступным, в
 отличии от отстальных параметров в классе, всегда можно использовать над первым аннотацию геттер и\или с сеттер с дополнением (AccessLevel.NONE) . Для примера
 такого использования поставил (AccessLevel.PROTECTED) над параметром name в классе Car
Добавить еще что-то чисто по коду без названной задачи, в которой этот код бы использовался, затрудняюсь. Разве что можно было бы добавить читаймости, разнеся классы
 по логичным папкам. К примеру интерфейсы вынести в папку interfaces, абстракный класс Car и классы LightWeightCar и Lorry - в cars, и Engine - в папку details. Но
 классов мало, не уверен, что здесь это целесообразно.